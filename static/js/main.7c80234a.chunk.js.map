{"version":3,"sources":["components/Button/CustomButton.js","screens/LandingScreen/LandingScreen.js","constants/modalConstants.js","constants/patientConstants.js","actions/patientActions.js","components/EditPatientModal/EditPatient.js","constants/userConstants.js","components/CustomNavbar/CustomNavbar.js","actions/userActions.js","screens/PatientLisingScreen/PatientListingScreen.js","screens/PatientDetailScreen/PatientDetailScreen.js","App.js","store.js","reducers/patientReducer.js","reducers/userReducer.js","index.js","screens/PatientDetailScreen/patientDetail.module.css","screens/LandingScreen/landingScreen.module.css","screens/PatientLisingScreen/styles.module.css","components/CustomNavbar/navbar.module.css","components/EditPatientModal/editPatient.module.css","components/Button/customButton.module.css"],"names":["CustomButton","props","Button","className","styles","button","children","LandingScreen","history","useHistory","useState","userName","setUserName","loggedUser","setLoggedUser","useEffect","userData","JSON","parse","localStorage","getItem","console","log","Container","container","Row","innerContainer","imageContainer","src","alt","formContainer","Form","onSubmit","e","preventDefault","setItem","stringify","push","onClick","mutedText","window","clear","Group","controlId","Control","type","placeholder","maxLength","value","onChange","target","modalConstants","ADD_PATIENT_REQUEST","ADD_PATIENT_SUCCESS","EDIT_PATIENT_REQUEST","EDIT_PATIENT_SUCCESS","DELETE_PATIENT","RESET_DATA","editPatient","data","id","dispatch","getState","a","tableData","patientData","elementsIndex","findIndex","element","newTableData","payload","error","response","message","EditPatient","useDispatch","existingPatientData","firstName","setFirstName","lastName","setLastName","phone","setPhone","email","setEmail","country","setCountry","countryList","setCountryList","street","setStreet","pinCode","setPinCode","fetchCountries","axios","get","countryData","map","d","name","callingCode","callingCodes","length","Modal","mainContainer","size","aria-labelledby","centered","Header","modalHeader","Title","title","Body","uuidv4","addPatient","onHide","Label","required","Text","Col","option","options","c","label","code","htmlFor","InputGroup","Prepend","FormControl","Footer","USER_LOGOUT","CustomNavbar","React","modalShow","setModalShow","Navbar","Brand","logo","Toggle","Collapse","buttonGroup","addButton","userLogout","xmlns","fill","width","height","viewBox","show","PatientLisingScreen","searchText","setSearchText","selectedPatient","setSelectedPatient","filteredData","setFilteredtData","useSelector","state","editPatientModalHandler","searchInput","filter","toLowerCase","includes","header","Table","striped","hover","sytle","borderColor","index","tableRow","onDoubleClick","noData","PatientDetailScreen","patientId","match","params","patientsData","backContainer","backText","splice","App","path","component","exact","reducer","combineReducers","action","loading","user","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7c80234a.chunk.js","sourcesContent":["import { Button } from 'react-bootstrap'\r\nimport React from 'react'\r\nimport styles from './customButton.module.css'\r\nconst CustomButton = (props) => {\r\n    return (\r\n        <Button className={styles.button} {...props}>\r\n      {props.children}\r\n      </Button>\r\n    )\r\n}\r\n\r\nexport default CustomButton\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Form, Row } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/CustomButton\";\r\nimport styles from \"./landingScreen.module.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst LandingScreen = () => {\r\n    let history = useHistory();\r\n\r\n    const [userName,setUserName]=useState('')\r\n    const [loggedUser,setLoggedUser]=useState('')\r\n    const submitHandler =(e)=>{\r\n        e.preventDefault()\r\n        localStorage.setItem('User',JSON.stringify({userName}))\r\n        history.push('/patients')\r\n    }\r\n    const logoutHandler=()=>{\r\n        window.localStorage.clear();\r\n        setLoggedUser('')\r\n    }\r\n    useEffect(()=>{\r\n        let userData=JSON.parse(localStorage.getItem('User'))\r\n        if(userData){\r\n            setLoggedUser(userData.userName)\r\n        }\r\n        \r\n    },[setLoggedUser])\r\n    console.log(loggedUser)\r\n  return (\r\n    <Container className={styles.container}>\r\n      <Row>\r\n        <div className={styles.innerContainer}>\r\n          <Row>\r\n            <div className={styles.imageContainer}>\r\n              <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/4/41/AliveCor_Logo_PNG.png\"\r\n                alt=\"logo\"\r\n              />\r\n            \r\n            </div>\r\n          </Row>\r\n          <Row className={styles.formContainer}>\r\n           <Form onSubmit={submitHandler}>\r\n           {!loggedUser ? ( <>\r\n            <Form.Group className=\"mb-3\" controlId=\"firstName\">\r\n               \r\n               <Form.Control\r\n                 type=\"text\"\r\n                 placeholder=\"Enter your Name to Continue\"\r\n                 maxLength=\"20\"\r\n                 value={userName}\r\n                 onChange={(e) => setUserName(e.target.value)}\r\n               />\r\n             </Form.Group>\r\n             <CustomButton type=\"submit\">\r\n            Continue\r\n           </CustomButton>\r\n           </>)\r\n            :(<>\r\n                <CustomButton onClick={()=>history.push('/patients')}>\r\n                Continue as {loggedUser}\r\n               </CustomButton>\r\n               <p className={styles.mutedText} onClick={()=>logoutHandler()}>Logout, Start Afresh?</p>\r\n               </>\r\n            )}\r\n            </Form>\r\n          </Row>\r\n        </div>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LandingScreen;\r\n","export const modalConstants={\r\n    EDIT:'EDIT',\r\n    CREATE:'CREATE'\r\n}","export const ADD_PATIENT_REQUEST=\"ADD_PATIENT_REQUEST\"\r\nexport const ADD_PATIENT_SUCCESS = \"ADD_PATIENT_SUCCESS\";\r\nexport const ADD_PATIENT_FAIL = \"ADD_PATIENT_FAIL\";\r\nexport const EDIT_PATIENT_REQUEST = \"EDIT_PATIENT_REQUEST\";\r\nexport const EDIT_PATIENT_SUCCESS = \"EDIT_PATIENT_SUCCESS\";\r\nexport const EDIT_PATIENT_FAIL = \"EDIT_PATIENT_FAIL\";\r\nexport const DELETE_PATIENT=\"DELETE_PATIENT\"\r\nexport const RESET_DATA=\"RESET_DATA\"","import {\r\n  EDIT_PATIENT_SUCCESS,\r\n  EDIT_PATIENT_REQUEST,\r\n  ADD_PATIENT_FAIL,\r\n  EDIT_PATIENT_FAIL,\r\n  ADD_PATIENT_REQUEST,\r\n  ADD_PATIENT_SUCCESS,\r\n  DELETE_PATIENT,\r\n} from \"../constants/patientConstants\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nexport const addPatient = (data) => async (dispatch, getState) => {\r\n  try {\r\n    //cherry picking existing data from the state\r\n    const tableData = getState().patientData.data;\r\n    console.log(tableData);\r\n    //state to request before api call\r\n    dispatch({\r\n      type: ADD_PATIENT_REQUEST,\r\n    });\r\n    //add data to the existing array of data (supposed to be an api call)\r\n    tableData.push({ ...data, id: uuidv4() });\r\n    dispatch({\r\n      type: ADD_PATIENT_SUCCESS,\r\n      payload: tableData,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: ADD_PATIENT_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const editPatient = (data, id) => async (dispatch, getState) => {\r\n  try {\r\n    console.log(data);\r\n    //cherry picking existing data from the state\r\n    const tableData = getState().patientData.data;\r\n    //state to request before api call\r\n    dispatch({\r\n      type: EDIT_PATIENT_REQUEST,\r\n    });\r\n    //add data to the existing array of data (supposed to be an api call)\r\n    const elementsIndex = tableData.findIndex((element) => element.id === id);\r\n    if (elementsIndex >= 0) {\r\n      let newTableData = [...tableData];\r\n      newTableData[elementsIndex] = {id,...data};\r\n      dispatch({\r\n        type: EDIT_PATIENT_SUCCESS,\r\n        payload: newTableData,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: EDIT_PATIENT_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deletePatient = (id) => async (dispatch, getState) => {\r\n  try {\r\n    //cherry picking existing data from the state\r\n    const tableData = getState().patientData.data;\r\n    //state to request before api call\r\n    dispatch({\r\n      type: EDIT_PATIENT_REQUEST,\r\n    });\r\n    //add data to the existing array of data (supposed to be an api call)\r\n    const elementsIndex = tableData.findIndex((element) => element.id === id);\r\n    \r\n    if (elementsIndex >= 0) {\r\n      tableData.splice(elementsIndex,1);\r\n      dispatch({\r\n        type: DELETE_PATIENT,\r\n        payload: tableData,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    \r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  Form,\r\n  Modal,\r\n  Col,\r\n  Row,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport { editPatient, addPatient } from \"../../actions/patientActions\";\r\nimport styles from \"./editPatient.module.css\";\r\nimport { modalConstants } from \"../../constants/modalConstants\";\r\n\r\nimport CustomButton from \"../Button/CustomButton\";\r\nconst EditPatient = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { type, data: existingPatientData } = props;\r\n  //states to handle inputs\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [phone, setPhone] = useState(null);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [countryList, setCountryList] = useState([]);\r\n  const [street, setStreet] = useState(\"\");\r\n  const [pinCode, setPinCode] = useState(\"\");\r\n  const clearInputs = () => {\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setPhone(\"\");\r\n    setEmail(\"\");\r\n    setCountry(\"\");\r\n    setStreet(\"\");\r\n    setPinCode(\"\");\r\n    setCountry(\"\");\r\n  };\r\n  //if data is existing in props\r\n  const populateData = (data) => {\r\n    console.log(\"populate data\");\r\n    setFirstName(data.firstName);\r\n    setLastName(data.lastName);\r\n    setPhone(data.phone);\r\n    setEmail(data.email);\r\n    setStreet(data.street);\r\n    setPinCode(data.pinCode);\r\n    setCountry(data.country);\r\n  };\r\n  //fetching countries\r\n  const fetchCountries = async () => {\r\n    const { data } = await axios.get(\"https://restcountries.eu/rest/v2/all\");\r\n    let countryData = data.map((d) => {\r\n      return { name: d.name, callingCode: d.callingCodes[0] };\r\n    });\r\n    setCountryList(countryData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    countryList.length === 0 && fetchCountries();\r\n    if (type === modalConstants.EDIT) {\r\n      populateData(existingPatientData);\r\n    }\r\n  }, [existingPatientData]);\r\n  //global submit handler\r\n  const submitHandler = (e) => {\r\n    //stopping event propogation to reload the page\r\n    e.preventDefault();\r\n    const data = {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      country,\r\n      street,\r\n      pinCode,\r\n    };\r\n    type === modalConstants.EDIT\r\n      ? dispatch(editPatient(data, existingPatientData.id))\r\n      : dispatch(addPatient(data));\r\n    //cleanup\r\n    clearInputs();\r\n    props.onHide();\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className={styles.mainContainer}\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header className={styles.modalHeader}>\r\n          <Modal.Title\r\n            id=\"contained-modal-title-vcenter\"\r\n            className={styles.title}\r\n          >\r\n            {type === modalConstants.EDIT ? \"Edit\" : \"Create\"} Patient\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group className=\"mb-3\" controlId=\"firstName\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter First Name\"\r\n                maxLength=\"20\"\r\n                value={firstName}\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"lastName\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Last Name\"\r\n                maxLength=\"20\"\r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"Address\">\r\n              <Form.Label>Address</Form.Label>\r\n              <Row>\r\n                <Col>\r\n                  <Select\r\n                    placeholder=\"Select Country\"\r\n                    value={country}\r\n                    onChange={(option) => setCountry(option)}\r\n                    options={countryList.map((c) => {\r\n                      return {\r\n                        value: c.name,\r\n                        label: c.name,\r\n                        code: c.callingCode,\r\n                      };\r\n                    })}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Street Name\"\r\n                    value={street}\r\n                    onChange={(e) => setStreet(e.target.value)}\r\n                    required\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Pincode\"\r\n                    value={pinCode}\r\n                    onChange={(e) => setPinCode(e.target.value)}\r\n                    required\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Form.Group>\r\n            <label htmlFor=\"basic-url\">Phone Number</label>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Prepend>\r\n                {country && (\r\n                  <InputGroup.Text id=\"basic-addon1\">\r\n                    +{country.code}\r\n                  </InputGroup.Text>\r\n                )}\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                type=\"text\"\r\n                placeholder=\"Enter Phone Number\"\r\n                maxLength=\"10\"\r\n                value={phone}\r\n                onChange={(e) => setPhone(e.target.value)}\r\n                required\r\n              />\r\n            </InputGroup>\r\n            <CustomButton type=\"submit\">\r\n              {type === modalConstants.EDIT ? \"Save Changes\" : \"Submit\"}\r\n            </CustomButton>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <CustomButton onClick={props.onHide}>Close</CustomButton>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditPatient;\r\n","\r\nexport const USER_LOGOUT=\"USER_LOGOUT\"","import React from \"react\";\r\nimport { Form, Navbar } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { modalConstants } from \"../../constants/modalConstants\";\r\nimport EditPatient from \"../EditPatientModal/EditPatient\";\r\nimport styles from \"./navbar.module.css\";\r\n\r\nimport { userLogout } from \"../../actions/userActions\";\r\nconst CustomNavbar = () => {\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  return (\r\n    <Navbar className={styles.container}>\r\n      <Navbar.Brand className={styles.logo} onClick={() => history.push(\"/\")}>\r\n        <h4>AliveCor</h4>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle />\r\n      <Navbar.Collapse className={styles.buttonGroup}>\r\n      <Form>\r\n</Form>\r\n        <Navbar.Text\r\n          onClick={() => setModalShow(true)}\r\n          className={styles.addButton}\r\n        >\r\n          <h6>Add Patient</h6>\r\n        </Navbar.Text>\r\n        <Navbar.Text onClick={() => dispatch(userLogout(history))}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"white\"\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path d=\"M16 9v-4l8 7-8 7v-4h-8v-6h8zm-16-7v20h14v-2h-12v-16h12v-2h-14z\" />\r\n          </svg>\r\n        </Navbar.Text>\r\n      </Navbar.Collapse>\r\n      <EditPatient\r\n        type={modalConstants.CREATE}\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default CustomNavbar;\r\n","import { RESET_DATA } from \"../constants/patientConstants\";\r\nimport { USER_LOGOUT } from \"../constants/userConstants\";\r\nexport const userLogout = (history) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: RESET_DATA,\r\n    });\r\n    dispatch({\r\n      type: USER_LOGOUT,\r\n    });\r\n    window.localStorage.clear();\r\n    history.push('/')\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector,useDispatch} from \"react-redux\";\r\nimport { Col, Container, Form, Row, Table } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styles from \"./styles.module.css\";\r\nimport { modalConstants } from \"../../constants/modalConstants\";\r\nimport EditPatient from \"../../components/EditPatientModal/EditPatient\";\r\nimport CustomNavbar from \"../../components/CustomNavbar/CustomNavbar\";\r\nconst PatientLisingScreen = (props) => {\r\n  let history = useHistory();\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [selectedPatient, setSelectedPatient] = useState({});\r\n  const [filteredData, setFilteredtData] = useState([]);\r\n  let { data } = useSelector((state) => state.patientData);\r\n  console.log(data);\r\n  const editPatientModalHandler = (patientData) => {\r\n    setSelectedPatient(patientData);\r\n    setModalShow(true);\r\n  };\r\n  const filterHandler = (searchInput) => {\r\n    let filteredData = data.filter(\r\n      (value) =>\r\n        value.firstName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.lastName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.email.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.phone.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.country.value.toLowerCase().includes(searchInput.toLowerCase()) || \r\n        value.street.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.pinCode.toLowerCase().includes(searchInput.toLowerCase())\r\n    );\r\n    return filteredData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFilteredtData(filterHandler(searchText));\r\n  }, [searchText,data]);\r\n  console.log(filteredData);\r\n  return (\r\n    <>\r\n     <CustomNavbar history={props.history} />\r\n    <Container className={styles.container}>\r\n      <Row className={styles.header}>\r\n        <Col>\r\n          <h3 className={styles.title}>Patient List</h3>\r\n        </Col>\r\n        <Col>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"firstName\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Search Patient...\"\r\n                maxLength=\"20\"\r\n                value={searchText}\r\n                onChange={(e) => setSearchText(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Table striped hover>\r\n          <thead>\r\n            <tr sytle={{borderColor:'blue'}}>\r\n              <th>S.NO</th>\r\n              <th>First Name</th>\r\n              <th>Last Name</th>\r\n\r\n              <th>Email</th>\r\n              <th>Phone Number</th>\r\n              <th>Address</th>\r\n              <th>Pin Code</th>\r\n              <th>Edit</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredData.length>0 &&\r\n              filteredData.map((d, index) => (\r\n                <tr className={styles.tableRow} onClick={()=>history.push(`/patients/${d.id}`)} onDoubleClick={()=>editPatientModalHandler(d)}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{d.firstName}</td>\r\n                  <td>{d.lastName}</td>\r\n                  <td>{d.email}</td>\r\n                  <td>{d.phone}</td>\r\n                  <td>\r\n                    {d.street}, {d.country.value}\r\n                  </td>\r\n                  <td>{d.pinCode}</td>\r\n                  <td onClick={()=>editPatientModalHandler(d)}>Edit</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n        {filteredData.length===0 &&(\r\n          <div className={styles.noData}>\r\n          <h4>No data found</h4>\r\n        </div>\r\n        )}\r\n      </Row>\r\n      <EditPatient\r\n        type={modalConstants.EDIT}\r\n        data={selectedPatient}\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientLisingScreen;\r\n","import React,{useState,useEffect} from \"react\";\r\nimport axios from 'axios';\r\nimport { useDispatch ,useSelector} from \"react-redux\";\r\nimport { Col, Container, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Select from \"react-select\";\r\nimport CustomNavbar from \"../../components/CustomNavbar/CustomNavbar\";\r\nimport styles from './patientDetail.module.css'\r\nimport CustomButton from \"../../components/Button/CustomButton\";\r\nimport { deletePatient, editPatient } from \"../../actions/patientActions\";\r\nconst PatientDetailScreen = (props) => {\r\n    let history = useHistory();\r\n    const {id:patientId}=props.match.params\r\n    const dispatch = useDispatch();\r\n    let { data:patientsData } = useSelector((state) => state.patientData);\r\n    \r\n  \r\n    //states to handle inputs\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [phone, setPhone] = useState(null);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [country, setCountry] = useState(\"\");\r\n    const [countryList, setCountryList] = useState([]);\r\n    const [street, setStreet] = useState(\"\");\r\n    const [pinCode, setPinCode] = useState(\"\");\r\n  \r\n    //if data is existing in props\r\n    const populateData = (data) => {\r\n      console.log(\"populate data\");\r\n      setFirstName(data.firstName);\r\n      setLastName(data.lastName);\r\n      setPhone(data.phone);\r\n      setEmail(data.email);\r\n      setStreet(data.street);\r\n      setPinCode(data.pinCode);\r\n      setCountry(data.country);\r\n    };\r\n    //fetching countries\r\n    const fetchCountries = async () => {\r\n      const { data } = await axios.get(\"https://restcountries.eu/rest/v2/all\");\r\n      let countryData = data.map((d) => {\r\n        return { name: d.name, callingCode: d.callingCodes[0] };\r\n      });\r\n      setCountryList(countryData);\r\n    };\r\n  \r\n    useEffect(() => {\r\n      countryList.length === 0 && fetchCountries();\r\n      let index=patientsData.findIndex(d=>d.id===patientId)\r\n      if(index<0){\r\n          return history.push('/patients')\r\n      }\r\n      \r\n        index >-1 && populateData(patientsData[index]);\r\n    \r\n    }, [patientsData,history,patientId, countryList.length]);\r\n    //global submit handler\r\n    const submitHandler = (e) => {\r\n      //stopping event propogation to reload the page\r\n      e.preventDefault();\r\n      const dataToSave = {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        phone,\r\n        country,\r\n        street,\r\n        pinCode,\r\n      };\r\n\r\n        dispatch(editPatient(dataToSave, patientId))\r\n      //cleanup\r\n      history.push('/patients')\r\n    };\r\n  return (\r\n    <>\r\n      <CustomNavbar history={props.history} />\r\n      <Container className={styles.container}>\r\n          <Row>\r\n              <div className={styles.backContainer} onClick={()=>history.push('/patients')}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"#2D9F86\" viewBox=\"0 0 24 24\"><path d=\"M16.67 0l2.83 2.829-9.339 9.175 9.339 9.167-2.83 2.829-12.17-11.996z\"/></svg>\r\n        <span className={styles.backText}>Back</span>\r\n              </div>\r\n          </Row>\r\n        <Row className={styles.header}>\r\n          <Col>\r\n            <h3 className={styles.title}>Patient Detail</h3>\r\n          </Col>\r\n          \r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n            <Form onSubmit={submitHandler} className={styles.formContainer}>\r\n            <Form.Group className=\"mb-3\" controlId=\"firstName\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter First Name\"\r\n                maxLength=\"20\"\r\n                value={firstName}\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"lastName\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Last Name\"\r\n                maxLength=\"20\"\r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>           \r\n            <Form.Group className=\"mb-3\" controlId=\"Address\">\r\n              <Form.Label>Address</Form.Label>\r\n              <Row>\r\n                <Col>\r\n                  <Select\r\n                  placeholder=\"Select Country\"\r\n                    value={country}\r\n                    onChange={(option) => setCountry(option)}\r\n                    options={countryList.map((c) => {\r\n                      return { value: c.name, label: c.name,code:c.callingCode };\r\n                    })}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Street Name\"\r\n                    value={street}\r\n                    onChange={(e) => setStreet(e.target.value)}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Pincode\"\r\n                    value={pinCode}\r\n                    onChange={(e) => setPinCode(e.target.value)}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Form.Group>\r\n            <label htmlFor=\"basic-url\">Phone Number</label>\r\n            <InputGroup className=\"mb-3\">\r\n              \r\n              <InputGroup.Prepend>\r\n               {country &&  <InputGroup.Text id=\"basic-addon1\">+{country.code}</InputGroup.Text>}\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                type=\"text\"\r\n                placeholder=\"Enter Phone Number\"\r\n                maxLength=\"10\"\r\n                value={phone}\r\n                onChange={(e) => setPhone(e.target.value)}\r\n              />\r\n            </InputGroup>\r\n            <Form.Group>\r\n            <div className={styles.buttonGroup} >\r\n            <CustomButton type=\"submit\">\r\n               {\"Save Changes\" }\r\n            </CustomButton>\r\n            <CustomButton onClick={()=>{\r\n                dispatch(deletePatient(patientId))\r\n                history.push('/patients')\r\n            }}>\r\n               {\"Delete Patient\" }\r\n            </CustomButton>\r\n            </div>\r\n            </Form.Group>\r\n          </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientDetailScreen;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport LandingScreen from \"./screens/LandingScreen/LandingScreen\"\nimport PatientLisingScreen from \"./screens/PatientLisingScreen/PatientListingScreen\";\nimport PatientDetailScreen from \"./screens/PatientDetailScreen/PatientDetailScreen\";\nfunction App() {\n  return (\n    <div>\n     \n      <Router>\n        <Route path=\"/\" component={LandingScreen} exact />\n        <Route path=\"/patients\" component={PatientLisingScreen} exact />\n        <Route path=\"/patients/:id\" component={PatientDetailScreen} exact />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { patientReducer } from \"./reducers/patientReducer\";\r\nimport { userReducer } from \"./reducers/userReducer\";\r\n\r\nconst reducer = combineReducers({\r\n  patientData: patientReducer,\r\n  user:userReducer\r\n});\r\nconst initialState = {patientData:{data:[]},user:{}};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\nexport default store;\r\n","import {\r\n  ADD_PATIENT_REQUEST,\r\n  ADD_PATIENT_SUCCESS,\r\n  DELETE_PATIENT,\r\n  EDIT_PATIENT_REQUEST,\r\n  EDIT_PATIENT_SUCCESS,\r\n  RESET_DATA,\r\n} from \"../constants/patientConstants\";\r\nexport const patientReducer = (state = {data:[]}, action) => {\r\n  switch (action.type) {\r\n    case ADD_PATIENT_REQUEST:\r\n      return { ...state, loading: true };\r\n    case ADD_PATIENT_SUCCESS:\r\n      return { ...state, data: action.payload };\r\n      case EDIT_PATIENT_REQUEST:\r\n      return { ...state, loading: true };\r\n    case EDIT_PATIENT_SUCCESS:\r\n      return { ...state, data: action.payload };\r\n      case DELETE_PATIENT:\r\n      return { ...state, data: action.payload };\r\n      case RESET_DATA:\r\n      return { ...state, data: [] };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n   USER_LOGOUT\r\n  } from \"../constants/userConstants\";\r\n  export const userReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      \r\n        case USER_LOGOUT:\r\n        return { ...state, data: null };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","import React from 'react';\nimport {Provider} from 'react-redux'\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"patientDetail_container__1kAGz\",\"header\":\"patientDetail_header__1Ir-f\",\"title\":\"patientDetail_title__Ee6W4\",\"backContainer\":\"patientDetail_backContainer__tQ31G\",\"backText\":\"patientDetail_backText__3qWtl\",\"buttonGroup\":\"patientDetail_buttonGroup__3Nftl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"landingScreen_container__16USH\",\"innerContainer\":\"landingScreen_innerContainer__8keEi\",\"imageContainer\":\"landingScreen_imageContainer__3OPoL\",\"formContainer\":\"landingScreen_formContainer__2sAcp\",\"mutedText\":\"landingScreen_mutedText__1XNMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__35X8k\",\"header\":\"styles_header__3lKDF\",\"title\":\"styles_title__2fAYq\",\"noData\":\"styles_noData__TYLB-\",\"tableRow\":\"styles_tableRow__25pAi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"navbar_container__35diA\",\"logo\":\"navbar_logo__3k2QQ\",\"addButton\":\"navbar_addButton__KZ0mj\",\"buttonGroup\":\"navbar_buttonGroup__fxAAb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalHeader\":\"editPatient_modalHeader__Prh5d\",\"title\":\"editPatient_title__2xNjM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"customButton_button__1TcxB\"};"],"sourceRoot":""}